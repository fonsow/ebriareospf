 1 - Y - stack, heap
 2 - Y - (crafted leak, shellcode)
 3 - Y - (static canary, shellcode)
 4 - Y - stack, heap, libc
 5 - Y - (shellcode)
 6 - Y - (shellcode)
 7 - Y - .text , (flag esta em memoria, shellcode)
 8 - Y - stack,  (leak com %p, shellcode)
 9 - Y - (rop chain apenas para leitura de um file)
10 - Y - heap
11 - Y - libc
12 - N - (command injection /bin/sh)
13 - Y - .text, libc
14 - Y - libc, libc, libc
15 - Y - libc
16 - Y - heap, libc
17 - N - rop chain apenas com execve bin/sh (valores encoded as calc nums)
18 - N - rop chain apenas com execve bin/sh (valores encoded as calc nums)
19 - Y - heap, libc, libc, libc, heap
20 - Y - stack, heap, heap
21 - Y - stack, libc
22 - N - user-supplied seccomp filter
23 - N - fmt string -> stack overwrite
24 - Y - canary leak, ret2win
25 - Y - canary leak, ret2win
26 - Y - libc 
27 - Y - libc, rop chain
28 - Y - heap, shellcode
29 - Y - libc
30 - Y - stack, libc
31 - Y - heap, libc, .text
32 - Y - stack, shellcode
33 - Y - libc
34 - Y - rop chain
35 - Y - libc
36 - Y - mmaped segment, heap
37 - Y - SROP
38 - Y - libc
39 - Y - heap, .text, libc
40 - Y - libc
41 - Y - libc
42 - Y - libc
43 - Y - libc
44 - Y - libc
45 - N - no leaks, just unsorted bin -> ret2win
46 - Y - libc
47 - Y - libc
48 - Y - libc
49 - Y - libc
50 - Y - libc
51 - Y - text (PIE), heap, libc, stack
52 - Y - heap, libc
53 - Y - libc
54 - Y - libc
55 - Y - rop chain
56 - Y - rop chain
57 - Y - rop chain (3 rops)
58 - Y - rop chain
59 - Y - rop chain
60 - Y - rop chain (32bit)
61 - Y - libc
62 - Y - heap, libc
63 - Y - 1 rop, shellcode
64 - Y - libc
65 - Y - ret2libc apenas + bin_sh address no input (Rop chain)
66 - N - no leaks, just heap overlap and embed system("cat flag.txt")
67 - N - ret2win cat flag.txt
68 - Y - libc, heap
69 - N - writing shellcode, bit by bit..
70 - Y - libc, heap?
71 - N - format string write apenas
72 - Y - stack
73 - Y - libc, stack, canary
74 - Y - libc, canary
75 - Y - stack, (multiple 6 byte shellcode)
76 - Y - canary, libc
77 - N - shellcode bit a bit
78 - Y - libc, canary
79 - Y - shellcode (2 byte only instructions)
80 - Y - stack (hex)
81 - Y - libc
82 - Y - shellcode
83 - Y - shellcode
84 - Y - stack
85 - Y - libc
86 - Y - libc
87 - Y - libc
88 - Y - libc
89 - Y - stack
90 - N - cmd injection
91 - Y - shellcode
92 - Y - stack, shellcode
93 - Y - rop chain, shellcode
94 - Y - 2 rop chains, libc
95 - Y - stack, text(no pie), libc
96 - N - stack overflow into variable
97 - Y - libc, rop chain
98 - N - ret2win
99 - Y - text (no pie), libc
100 - Y - unlink (varios segments na heap 1 .text de ret2win), leak stack, leak heap



#remove pause() and raw_input()
#r = processs -> 127.0.0.1 1337
#binary Ã© o elf sem .so

# resultados
Para 100 binÃ¡rios seleccionados aleatoriamente:

85/100 exploits detectados

leak detector:
68/100

shellcode detector:
16/100

rop chain detector:
19/100

leaks:
-> 8 leaks do .text (PIE)
-> 21 stack
-> 7 canary
-> 27 heap
-> 63 libc
-> 2 mmaped segments


